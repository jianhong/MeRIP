/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    withName: 'FASTQC_RAW' {
        ext.args = '--quiet'
        publishDir = [
            path: { "${params.outdir}/QC/fastqc/raw" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'FASTP' { // trimming
        ext.args = params.extra_fastp_args ?: ''
        publishDir = [
            path: { "${params.outdir}/QC/fastp" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.endsWith('.fastp.html') ? filename : null }
        ]
    }

    withName: 'FASTQC_TRIM' {
        ext.args = '--quiet'
        publishDir = [
            path: { "${params.outdir}/QC/fastqc/trim" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'CAT_FASTQ' {
        publishDir = [
            enabled: false
        ]
    }

    withName: 'SAMTOOLS_SORT' {//bam_stats, start from sorting
        ext.prefix  = { "${meta.id}.srt" }
        ext.args    = { "-m ${(task.memory.mega*0.8/task.cpus).intValue()}M" }
        publishDir  = [
            path: { "${params.outdir}/alignments/${params.aligner}/sorted_bam" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: 'SAMTOOLS_INDEX' {
        publishDir  = [
            path: { "${params.outdir}/alignments/${params.aligner}/sorted_bam" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: 'SAMTOOLS_STATS' {//bam_stats
        publishDir  = [
            path: { "${params.outdir}/QC/alignments/${params.aligner}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: 'SAMTOOLS_FLAGSTAT' {//bam_stats
        publishDir  = [
            path: { "${params.outdir}/QC/alignments/${params.aligner}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: 'SAMTOOLS_IDXSTATS' {//bam_stats
        publishDir  = [
            path: { "${params.outdir}/QC/alignments/${params.aligner}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: 'SAMTOOLS_MERGE' {
        publishDir = [
            enabled: false
        ]
    }

    withName: 'DEEPTOOLS_BAMCOVERAGE' {
        ext.args   = '--normalizeUsing CPM'
        publishDir = [
            path: { "${params.outdir}/alignments/${params.aligner}/bigwig" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'MACS2_CALLPEAK' {
        ext.args   = { "${params.macs2_params}" }
        publishDir = [
            path: { "${params.outdir}/called_peaks/macs2_${params.aligner}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'FRIP_SCORE' {
        ext.args   = '-bed -c -f 0.20'
        publishDir = [
            path: { "${params.outdir}/QC/macs2_${params.aligner}" },
            enabled: false
        ]
    }

    withName: 'MULTIQC_CUSTOM_PEAKS' {
        publishDir = [
            path: { "${params.outdir}/QC/macs2_${params.aligner}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'CUSTOM_DUMPSOFTWAREVERSIONS' {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            pattern: '*_versions.yml'
        ]
    }

    withName: 'MULTIQC' {
        ext.args   = params.multiqc_title ? "--title \"$params.multiqc_title\"" : ''
        publishDir = [
            path: { "${params.outdir}/QC/multiqc" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
}
//
// prepare genome
//
process {

    withName: 'GUNZIP_.*|UNTAR_.*' {
        publishDir  = [
            enabled: false
        ]
    }

    withName: 'GFFREAD' {
        ext.args   = '--keep-exon-attrs -F -T'
        publishDir = [
            path: { "${params.outdir}/genome" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_reference
        ]
    }

    withName: 'GTF2BED' {
        publishDir = [
            path: { "${params.outdir}/genome" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_reference
        ]
    }

    withName: 'CAT_ADDITIONAL_FASTA|PREPROCESS_TRANSCRIPTS_FASTA_GENCODE' {
        publishDir = [
            path: { "${params.outdir}/genome" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_reference
        ]
    }

    withName: 'CUSTOM_GETCHROMSIZES' {
        publishDir = [
            path: { "${params.outdir}/genome/chrom_sizes" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_reference
        ]
    }

    withName: 'KHMER_UNIQUEKMERS' {
        publishDir = [
            path: { "${params.outdir}/genome/khmer" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_reference
        ]
    }

}

//
// STAR alignment options
//

if ( params.aligner == 'star' ) {
    process {
        withName: 'STAR_GENOMEGENERATE*' {
            publishDir = [
                path: { "${params.outdir}/genome/${params.aligner}/index" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                enabled: params.save_reference
            ]
        }
        withName: 'STAR_ALIGN' {
            ext.args   = '--quantMode TranscriptomeSAM --twopassMode Basic --outSAMtype BAM Unsorted --readFilesCommand zcat --runRNGseed 0 --outFilterMultimapNmax 20 --alignSJDBoverhangMin 1 --outSAMattributes NH HI AS NM MD --quantTranscriptomeBan Singleend --outSAMstrandField intronMotif'
            publishDir = [
                path: { "${params.outdir}/alignments/${params.aligner}" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                enabled: params.save_align_intermeds
            ]
        }
    }
}

//
// HISAT2 alignment options
//

if ( params.aligner == 'hisat2' ) {
    if (!params.splicesites) {
        process {
            withName: 'HISAT2_EXTRACTSPLICESITES' {
                publishDir = [
                    path: { "${params.outdir}/genome/${params.aligner}/splicesites" },
                    mode: params.publish_dir_mode,
                    saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                    enabled: params.save_reference
                ]
            }
        }
    }
    process {
        withName: 'HISAT2_BUILD' {
            publishDir = [
                path: { "${params.outdir}/genome/${params.aligner}/index" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                enabled: params.save_reference
            ]
        }
        withName: 'HISAT2_ALIGN' {
            ext.args   = ''
            publishDir = [
                path: { "${params.outdir}/alignments/${params.aligner}" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                enabled: params.save_align_intermeds
            ]
        }
    }
}

//
// bowtie2 alignment options
//

if ( params.aligner == 'bowtie2' ) {
    process {
        withName: 'BOWTIE2_BUILD' {
            publishDir = [
                path: { "${params.outdir}/genome/${params.aligner}/index" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                enabled: params.save_reference
            ]
        }
        withName: 'BOWTIE2_ALIGN' {
            ext.args   = ''
            publishDir = [
                path: { "${params.outdir}/alignments/${params.aligner}" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                enabled: params.save_align_intermeds
            ]
        }
    }
}

//
// bwa alignment options
//

if ( params.aligner == 'bwa' ) {
    process {
        withName: 'BWA_INDEX' {
            publishDir = [
                path: { "${params.outdir}/genome/${params.aligner}/index" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                enabled: params.save_reference
            ]
        }
        withName: 'BWA_MEM' {
            ext.args   = ''
            publishDir = [
                path: { "${params.outdir}/alignments/${params.aligner}" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                enabled: params.save_align_intermeds
            ]
        }
    }
}

//
// scale calculation
//

if( params.spikein_fasta ){
    process {
        withName: 'SUBREAD_FEATURECOUNTS' {
            publishDir = [
                path: { "${params.outdir}/alignments/${params.aligner}/featurecounts_spikein" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
    }
}


//
// deeptools profile
//
if ( !params.skip_plot_profile ){
  process{
        withName: 'DEEPTOOLS_PLOTPROFILE' {
            publishDir = [
                path: { "${params.outdir}/QC/deeptools_${params.aligner}/genebody_ups_dws_profile" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }

        withName: 'DEEPTOOLS_PLOTHEATMAP' {
            publishDir = [
                path: { "${params.outdir}/QC/deeptools_${params.aligner}/genebody_ups_dws_profile" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }

        withName: 'DEEPTOOLS_COMPUTEMATRIX' {
            ext.args   = 'scale-regions --regionBodyLength 1000 --beforeRegionStartLength 3000 --afterRegionStartLength 3000 --missingDataAsZero --skipZeros --smartLabels'
            publishDir = [
                path: { "${params.outdir}/QC/deeptools_${params.aligner}/genebody_ups_dws_profile" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
    }
}

if ( !params.skip_plot_fingerprint ){
    process {
        withName: 'DEEPTOOLS_PLOTFINGERPRINT' {
            publishDir = [
                path: { "${params.outdir}/QC/deeptools_${params.aligner}/fingerprint" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                enabled: params.save_reference
            ]
        }
    }
}

if ( !params.skip_annotation ){
    process {
        withName: 'BIOC_CHIPPEAKANNO' {
            publishDir = [
                [
                    path: { "${params.outdir}/QC/macs2_${params.aligner}" },
                    mode: params.publish_dir_mode,
                    pattern: "**.png"
                ],
                [
                    path: { "${params.outdir}/called_peaks/macs2_${params.aligner}" },
                    mode: params.publish_dir_mode,
                    pattern: "**.csv"
                ]
            ]
        }
    }
}
